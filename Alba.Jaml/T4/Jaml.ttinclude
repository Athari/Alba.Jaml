<#@   include file="Common.ttinclude"
#><#@ import namespace="Alba.Jaml.XamlGeneration"
#><#+
    void GenerateJaml () {
        var T4 = GetT4();
        var data = LoadJson(null, "jaml");
        var generator = new XamlGenerator(data, Namespace, Path.GetFileNameWithoutExtension(Host.TemplateFile));
        Write(generator.GenerateXaml());
        T4.GenerateFile(Path.ChangeExtension(Host.TemplateFile, "g.xaml.cs"), () => GenerateCodeBehind(generator));
        T4.GenerateFileOnce(Path.ChangeExtension(Host.TemplateFile, "xaml.cs"), () => GenerateUserCodeBehind(generator));
        T4.Process();
    }

    void GenerateUserCodeBehind (XamlGenerator g) {
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace <#=g.NameSpace#>
{
    <#=g.ClassVisibility#> partial class <#=g.ClassName#>
    {
        public <#=g.ClassName#> ()
        {
            InitializeComponent();
        }
    }
}
<#+
    }

    void GenerateCodeBehind (XamlGenerator g) {
#>
// ReSharper disable RedundantUsingDirective
// ReSharper disable RedundantCast
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
<#+ foreach (var ns in XamlGenerator.WpfNameSpaces) { #>
using <#=ns#>;
<#+ } #>

namespace <#=g.NameSpace#>
{
    <#=g.ClassVisibility#> partial class <#=g.ClassName#>
    {
<#+ foreach (var conv in g.Converters) { #>
<#+   if (conv.IsSingle) { #>
        public static IValueConverter <#=conv.Name#> = new <#=conv.Name#>_Class();
<#+   } else { #>
        public static IMultiValueConverter <#=conv.Name#> = new <#=conv.Name#>_Class();
<#+   } #>
<#+ } #>
 
<#+ foreach (var conv in g.Converters) { #>
<#+   if (conv.IsSingle) { #>
        private class <#=conv.Name#>_Class : IValueConverter
        {
            public object Convert (object value, Type targetType, object param, CultureInfo culture)
            {
                if (ReferenceEquals(value, DependencyProperty.UnsetValue))
                    return DependencyProperty.UnsetValue;
                return <#=conv.Expression.Replace("(values[0])", "value")#>;
            }

            public object ConvertBack (object value, Type targetType, object param, CultureInfo culture)
            {
                throw new NotSupportedException("Converter supports only one-way binding.");
            }
        }
<#+   } else { #>
        private class <#=conv.Name#>_Class : IMultiValueConverter
        {
            public object Convert (object[] values, Type targetType, object param, CultureInfo culture)
            {
                if (values.Any(v => ReferenceEquals(v, DependencyProperty.UnsetValue)))
                    return DependencyProperty.UnsetValue;
                return <#=conv.Expression#>;
            }

            public object[] ConvertBack (object value, Type[] targetTypes, object param, CultureInfo culture)
            {
                throw new NotSupportedException("Converter supports only one-way binding.");
            }
        }
<#+   } #>
 
<#+ } #>
    }
}
<#+
    }
#>